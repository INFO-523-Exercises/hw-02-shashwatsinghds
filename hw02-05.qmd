---
title: "hw02-05"
author: "Shashwat Singh"
format: html
editor: visual
description: "Correlating Like a Data Master: Assess relationships within a novel data set using publication quality tables and plots."
---

# Correlating Like a Data Master

# **Required setup**

```{r, warning=FALSE}
if (!require(pacman))
  install.packages("pacman")

pacman::p_load(colorblindr,
       dlookr,
       formattable,
       GGally,
       ggdist,
       ggpubr,
       ggridges,
       here,
       tidyverse)

# Set global ggplot() theme
# Theme pub_clean() from the ggpubr package with base text size = 16
theme_set(theme_pubclean(base_size = 12)) 
# All axes titles to their respective far right sides
theme_update(axis.title = element_text(hjust = 1))
# Remove axes ticks
theme_update(axis.ticks = element_blank()) 
# Remove legend key
theme_update(legend.key = element_blank())
```

# Load and Examine a Data Set


Using the dataset from tidyurl- The dataset contains stock prices of big tech companies and tries to analyse the collapse of "Big Tech" stock prices. The data comes from Yahoo Finance via Kaggle

```{r}
# Loading the dataset
dataset <- read.csv("data/big_tech_stock_prices.csv") 

# Formattable data
dataset |>
  head() |>
  formattable()
```

# Describe and Visualize Correlations

Correlations are a statistical relationship between two numerical variables, may or may not be causal. Exploring correlations in your data allows you determine data independence, a major assumption of parametric statistics, which means your variables are both randomly collected.

```{r}
# Table of correlations between numerical variables (we are sticking to the default Pearson's r coefficient)
correlate(dataset) |>
  formattable()
```

```{r, warning=FALSE}
dataset |>
plot_correlate()
```

The variable's correlation is very high and it makes sense. This is because the variables open, low, high and close of a stock price do not change a lot for a particular day and very close to each other. This will be visible throughout the various correlation operations below. 


# Visualize Correlations within Groups

If we have groups that we will compare later on, it is a good idea to see how each numerical variable correlates within these groups.

```{r}
dataset <- dataset |>
  mutate(
    OpenGroup = ifelse(open >= 1 & open <= 10, "LowOpen", 
                       ifelse(open > 10 & open <= 100, "MediumOpen", "HighOpen"))
  )
  
  
```

```{r, warning=FALSE}
dataset |>
  group_by(OpenGroup) |>
  plot_correlate()
```

This is great, we have our correlations within groups! However, the correlation matrices aren’t always the most intuitive, so let’s plot!


```{r}
dataset |> 
  dplyr::select(OpenGroup, low, high) |>
  ggpairs(aes(color = OpenGroup, alpha = 0.5)) +
  theme(strip.background = element_blank())
```

The open group data for HighOpen is highly concentrated and the LowOpen and MediumOpen groups are basically outliers here.

# Describe and Visualize Relationships Based on Target Variables

## Target Variables

Target variables are essentially numerical or categorical variables that you want to relate others to in a data frame. dlookr does this through the target_by() function, which is similar to group_by() in dplyr. The relate() function then briefly analyzes the relationship between the target variable and the variables of interest.

The relationships below will have the formula relationship target ~ predictor

Numerical Target Variables: Numerical Variable of Interest
Formula: Sap_Flow (numerical response)  ~ pLWP (numerical predictor)

```{r}
# First, we need to remove NAs, they cause an error
dataset.noNA <- dataset |> 
  drop_na()

# The numerical predictor variable that we want
num <- target_by(dataset.noNA, close)

# Relating the variable of interest to the numerical target variable
num_num <- relate(num, open)

# Summary of the regression analysis - the same as the summary from lm(Formula)
summary(num_num)

```

```{r}
# Plotting the linear relationship
plot(num_num)
```

## Numerical Target Variables: Categorical Variable of Interest
Formula: pLWP (numerical response) ~ Group (categorical predictor)

```{r, warning=FALSE}


# The categorical predictor variable that we want
num <- target_by(dataset, stock_symbol) 

# We need to change Group to a factor
num$OpenGroup <- as.factor(num$OpenGroup)

# Relating the variable of interest to the numerical target variable
num_cat <- relate(num, OpenGroup)

# Summary of the ANOVA analysis - the same as the summary from anova(lm(Formula))
summary(num_cat)
```

```{r, warning=FALSE}
plot(num_cat) + 
  theme(axis.text.x = element_blank())
```

## Categorical Target Variables: Numerical Variable of Interest
Note that this produces descriptive statistics, unlike the other relationships we are looking at.

Formula: Group (categorical) ~ pLWP (numerical)

```{r, warning=FALSE}
# The categorical predictor variable that we want
categ <- target_by(dataset, OpenGroup)

# Relating the variable of interest to the numerical target variable
cat_num <- relate(categ, close)

# Summary of descriptive statistics
summary(cat_num)
```

```{r, warning=FALSE}
plot(cat_num) 
```


## Categorical Target Variables: Categorical Variable of Interest
```{r}
# Create new categorical column
cat_dataset <- dataset |>
  select(close, OpenGroup) |>
  drop_na() |>
  mutate(HighClose = ifelse(
    close > (mean(close + sd(close))), 
                          "Yes", 
                          "No"))

# New dataset 
cat_dataset |>
  head() |>
  formattable()
```


Now we have two categories!

Formula = HighClose (categorical) ~ OpenGroup (categorical response)

```{r, warning=FALSE}
# The categorical predictor variable that we want
categ <- target_by(cat_dataset, HighClose)

# Relating the variable of interest to the categorical target variable
cat_cat <- relate(categ, OpenGroup)

# Summary of the Chi-square test for Independence
summary(cat_cat)
```

```{r, warning=FALSE}
plot(cat_cat)
```

